#!/bin/sh

# This script is meant to be used with [FSGI][1].  It's a request handler for
# an HTTP server that produces SVG images of temperature/humidity measurements
# over a specified interval.
#
# [1]: https://github.com/dgoffredo/fsgi

src_dir="$(dirname "$0")"

DATABASE="$src_dir/db.sqlite"
export DATABASE

has_param() {
  [ -e "request/query/$1/0" ]
}

get_param() {
  cat "request/query/$1/0"
}

lesser_string() {
  printf '%s\n%s\n' "$1" "$2" | sort | head -1
}

escape_sql() {
  printf '%s' "$1" | tr "'" "''"
}

today_iso=$(date --iso --utc)

# case  all  first  last  days    resulting begin  resulting end
# ----  ---  -----  ----  ----    ---------------  -------------
# 1     w                         beginning        today
# 2*                              today - 1        today
# 3                       z       today â€“ z        today
# 4          x      y             x                y
# 5          x                    x                today
# 6          x            z       x                x + z
# 7                 y             beginning        y
# 8                 y     z       y - z            y
# 9          x      y     z       x                min(x + z, y)
#
# Note: Case 2 is special.  The first URL a client might try is without query parameters,
# and I'd prefer that didn't generate a huge query over all historical data.
# So, the default behavior is one day in the past.
#
# case 1
if has_param all; then
  if has_param first || has_param last || has_param days; then
    printf 400 >response/status
    printf 'The "all" query parameter must appear by itself if at all.\n' >response/body
    exit
  fi
  LAST=9999-12-31
  FIRST=0001-01-01
# case 2
elif ! has_param first && ! has_param last && ! has_param days; then
  LAST=$today_iso
  FIRST=$(TZ=Etc/UTC date --date "$today_iso - 1 days" --iso --utc)
# case 3
elif ! has_param first && ! has_param last && has_param days; then
  days=$(get_param days)
  LAST=$today_iso
  FIRST=$(TZ=Etc/UTC date --date "$today_iso - $days days" --iso --utc)
# case 4
elif has_param first && has_param last && ! has_param days; then
  LAST=$(get_param last)
  FIRST=$(get_param first)
# case 5
elif has_param first && ! has_param last && ! has_param days; then
  LAST=9999-12-31
  FIRST=$(get_param first)
# case 6
elif has_param first && ! has_param last && has_param days; then
  first=$(get_param first)
  days=$(get_param days)
  LAST=$(TZ=Etc/UTC date --date "$first + $days days" --iso --utc)
  FIRST=$first
# case 7
elif ! has_param first && has_param last && ! has_param days; then
  LAST=$(get_param last)
  FIRST=0001-01-01
# case 8
elif ! has_param first && has_param last && has_param days; then
  last=$(get_param last)
  days=$(get_param days)
  LAST=$last
  FIRST=$(TZ=Etc/UTC date --date "$last - $days days" --iso --utc)
# case 9
elif has_param first && has_param last && has_param days; then
  last=$(get_param last)
  first=$(get_param first)
  days=$(get_param days)
  after=$(TZ=Etc/UTC date --date "$first + $days days" --iso --utc)
  lesser=$(lesser_string "$after" "$last")
  LAST=$lesser
  FIRST=$first
fi

# Support "today" as a date.
if [ "$FIRST" = 'today' ]; then
  FIRST="$today_iso"
fi
if [ "$LAST" = 'today' ]; then
  LAST="$today_iso"
fi

# No funny business.
FIRST=$(escape_sql "$FIRST")
LAST=$(escape_sql "$LAST")

export FIRST
export LAST

read -r url_path <request/path

case "$url_path" in
  /data.svg|/data) exec "$src_dir/plotters/data" ;;
  /temperature-histogram.svg|/temperature-histogram) exec "$src_dir/plotters/temperature-histogram" ;;
  /humidity-histogram.svg|/humidity-histogram) exec "$src_dir/plotters/humidity-histogram" ;;
  /co2.svg|/co2) exec "$src_dir/plotters/co2" ;;
  /co2-latency-histogram.svg|/co2-latency-histogram) exec "$src_dir/plotters/co2-latency-histogram" ;;
  /co2-histogram.svg|/co2-histogram) exec "$src_dir/plotters/co2-histogram" ;;
  *)
    >response/status printf '404'
    >response/body printf '404 Not Found\n'
esac


